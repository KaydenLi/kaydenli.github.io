<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>项目环境搭建与初始化</title>
    <url>/2020/01/18/%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h1 id="项目环境搭建与初始化"><a href="#项目环境搭建与初始化" class="headerlink" title="项目环境搭建与初始化"></a>项目环境搭建与初始化</h1><hr>
<h2 id="1-工具安装和环境搭建（nodejs-npm-mongodb）"><a href="#1-工具安装和环境搭建（nodejs-npm-mongodb）" class="headerlink" title="1. 工具安装和环境搭建（nodejs,npm,mongodb）"></a>1. 工具安装和环境搭建（nodejs,npm,mongodb）</h2><ol>
<li>node安装：<a href="www.nodejs.org">nodejs官网</a><br><code>$ sudo apt install node</code></li>
<li>安装完成之后会有node命令和npm命令<br><code>$ npm -v</code> 查看是否安装完成</li>
<li>npm安装cnpm并设置淘宝源：<br><code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
<li>vue安装<br>全局安装vue：<code>$ cnpm install --global vue-cli</code><br>或者全局安装vue-cli脚手架工具： <code>$ sudo cnpm install -g @vue/cli</code></li>
<li>mongodb数据库的安装<br><code>$ sudo apt install mongodb</code><h2 id="2-初始化项目（vue-cli）"><a href="#2-初始化项目（vue-cli）" class="headerlink" title="2. 初始化项目（vue-cli）"></a>2. 初始化项目（vue-cli）</h2></li>
<li>sever文件夹：放置服务端项目，包括给后台管理界面提供的接口和给web端提供的端口<ol>
<li>初始化一个node项目：<code>$ cnpm init -y</code></li>
<li>建立入口文件： <code>$ touch index.js</code></li>
<li>在<code>index.js</code>内自定义脚本执行nodemo：<code>&quot;server&quot; : &quot;nodemon index.js&quot;</code></li>
<li>全局安装nodemon：<code>$ cnpm i -g nodemon</code></li>
</ol>
</li>
<li>web文件夹：前端界面<ol>
<li>建立vue初始文件：<code>$ vue create web</code></li>
<li>初始化完成后按照命令执行：<code>$ cd web</code>以及<code>$ npm run serve</code></li>
<li>进入浏览器查看 127.0.0.1:port 确认是否搭建成功</li>
</ol>
</li>
<li>admin文件夹：管理员界面<ol>
<li>建立vue初始文件：<code>$ vue create admin</code></li>
<li>初始化完成后按照命令执行：<code>$ cd admin</code>以及<code>$ npm run serve</code></li>
<li>进入浏览器查看 127.0.0.1:port 确认是否搭建成功</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Centos服务器上安装Nginx</title>
    <url>/2020/01/18/Centos%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85Nginx/</url>
    <content><![CDATA[<h1 id="Centos服务器上使用源文件安装Nginx"><a href="#Centos服务器上使用源文件安装Nginx" class="headerlink" title="Centos服务器上使用源文件安装Nginx"></a>Centos服务器上使用源文件安装Nginx</h1><h2 id="1-安装准备"><a href="#1-安装准备" class="headerlink" title="1. 安装准备"></a>1. 安装准备</h2><p>   首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel和zlib-devel ：<br><code>$ yum install gcc-c++</code><br><code>$ yum install pcre*</code><br><code>$ yum install zlib*</code><br><code>$ yum install openssl*</code><br>   也可以执行如下命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install gcc gcc-c++ autoconf automake make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zlib zlib-devel openssl openssl--devel pcre pcre-devel</span></span><br></pre></td></tr></table></figure>
<h2 id="2-安装-Nginx"><a href="#2-安装-Nginx" class="headerlink" title="2. 安装 Nginx"></a>2. 安装 Nginx</h2><h3 id="1-检查是否已经安装-Nginx"><a href="#1-检查是否已经安装-Nginx" class="headerlink" title="1. 检查是否已经安装 Nginx"></a>1. 检查是否已经安装 Nginx</h3><p>   安装之前，最好检查一下是否已经安装了Nginx：<code>$ find -name nginx</code><br>   如果系统已经安装了 Nginx，那么就先卸载：<code>$ yum remove nginx</code></p>
<h3 id="2-安装-Nginx-1"><a href="#2-安装-Nginx-1" class="headerlink" title="2. 安装 Nginx"></a>2. 安装 Nginx</h3><p>   (1) 安装时，首先进入 <code>/usr/local</code> 目录：<code>$ cd /usr/local</code><br>   (2) 从官网下载最新版的 Nginx：<br><code>$ wget http://nginx.org/download/nginx-1.9.9.tar.gz</code><br>   (3) 解压 Nginx 压缩包：<code>$ tar -zxvf nginx-1.9.9.tar.gz</code>，会产生一个 nginx-1.9.9 目录，这时进入 nginx-1.9.9 目录：<code>$ cd nginx-1.9.9</code><br>   (4) 使用 –prefix 参数指定 nginx 安装的目录，make、make install 安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./configure   </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>
<h2 id="3-安装检查"><a href="#3-安装检查" class="headerlink" title="3. 安装检查"></a>3. 安装检查</h2><p>查看 Nginx 的安装目录：<code>$ whereis nginx</code><br>安装完毕后，进入安装后目录<code>$ cd /usr/local/nginx</code>，便可以启动或停止它了。<br>到此，使用 CentOS 安装 Nginx 已经完成了。</p>
]]></content>
  </entry>
  <entry>
    <title>搭建管理后台（前端）</title>
    <url>/2020/01/18/%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%EF%BC%88%E5%89%8D%E7%AB%AF%EF%BC%89/</url>
    <content><![CDATA[<h1 id="搭建管理后台（前端）"><a href="#搭建管理后台（前端）" class="headerlink" title="搭建管理后台（前端）"></a>搭建管理后台（前端）</h1><h2 id="1-基于Element-UII的后台管理基础界面搭建"><a href="#1-基于Element-UII的后台管理基础界面搭建" class="headerlink" title="1. 基于Element UII的后台管理基础界面搭建"></a>1. 基于<a href="https://element.eleme.cn" target="_blank" rel="noopener">Element UI</a>I的后台管理基础界面搭建</h2><p>   进入admin文件夹：<code>$ cd admin</code>，使用vue-cli脚手架添加插件。</p>
<ol>
<li>安装<a href="https://element.eleme.cn" target="_blank" rel="noopener">elementui</a><br>安装elementui库 element ui 插件：<code>$ vue add element</code></li>
<li>安装路由<br>安装router进行路由管理：<code>$ vue add router</code></li>
<li>通过vue component来建立页面 <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">vue官网</a><h2 id="2-富文本编辑器（vue2-editor）"><a href="#2-富文本编辑器（vue2-editor）" class="headerlink" title="2. 富文本编辑器（vue2-editor）"></a>2. 富文本编辑器（<a href="https://www.vue2editor.com/guide.html#usage" target="_blank" rel="noopener">vue2-editor</a>）</h2>富文本编辑器vue2-editor的安装：<code>$ cnpm install vue2-editor</code>。先引用然后在vue文件中组件内注册：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tmplate&gt;</span><br><span class="line">   &lt;VueEditor&gt;&lt;&#x2F;VueEditor&gt;</span><br><span class="line">&lt;&#x2F;tmplate&gt;</span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;引用，使用import的解构写法，等价于写为</span><br><span class="line">&#x2F;&#x2F;import a from vue2-editor;vue-editor &#x3D; a.Vue-editor</span><br><span class="line">import &#123; VueEditor &#125; from &quot;vue2-editor&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">   components: &#123;</span><br><span class="line">      VueEditor</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-安装axios（axios）"><a href="#3-安装axios（axios）" class="headerlink" title="3. 安装axios（axios）"></a>3. 安装axios（<a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">axios</a>）</h2>Vue.js 2.0 版本推荐使用 axios 来完成 ajax 请求。Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中。安装命令：<code>cnpm i axios</code><br>axios的使用：</li>
<li>在前端的main.js中引用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">//使用axios.create创建一个axios的请求实例，此时定义到Vue的原型上（全局变量）</span></span><br><span class="line"><span class="comment">//为避免冲突加了一个$符号，这样就可以在任意Vue的页面上使用this.$http访问到这个axios的实例</span></span><br><span class="line">Vue.prototype.$http = axios.create(&#123;</span><br><span class="line"><span class="comment">//定义一个接口跟地址baseurl，在其他地方使用时不必要再书写长地址，便于使用</span></span><br><span class="line">   baseURL: <span class="string">'http://lcoalhost:3001/admin/api'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>在需要使用的地方使用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get请求</span></span><br><span class="line"><span class="keyword">this</span>.$http</span><br><span class="line">   .get(<span class="string">`articles`</span>)</span><br><span class="line">   .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">this</span>.articlescount = res.data;</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//post请求，实现分页，定义数据page对象</span></span><br><span class="line"><span class="keyword">this</span>.page.pageNumber = <span class="keyword">this</span>.pageNumber;</span><br><span class="line"><span class="keyword">this</span>.page.pageSize = <span class="keyword">this</span>.pageSize;</span><br><span class="line"><span class="keyword">this</span>.$http</span><br><span class="line">   .post(<span class="string">`articles/list`</span>, <span class="keyword">this</span>.page)</span><br><span class="line">   .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.articles = res.data;</span><br><span class="line">   &#125;)</span><br><span class="line">   .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Nginx 的配置</title>
    <url>/2020/01/18/Nginx%20%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Nginx-的配置"><a href="#Nginx-的配置" class="headerlink" title="Nginx 的配置"></a>Nginx 的配置</h1><h2 id="1-配置文件的位置"><a href="#1-配置文件的位置" class="headerlink" title="1. 配置文件的位置"></a>1. 配置文件的位置</h2><p>   若采用源文件安装的方法，安装后会在<code>/usr/local/nginx/conf</code>文件夹下。采用 yum 安装会在<code>/etc/nginx/nginx.conf</code>文件中。</p>
<h2 id="2-配置文件的说明"><a href="#2-配置文件的说明" class="headerlink" title="2. 配置文件的说明"></a>2. 配置文件的说明</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>　　　配置文件中以 # 开始的行，或者是前面有若干空格或者 TAB，然后再跟 # 的行，都被认为是注释，也就是只对编辑查看文件的用户有意义，程序在读取这些注释行的时候，其实际的内容是被忽略的。主配置文件 <code>nginx.conf</code> 以外的文件都是在某些情况下才使用的，而主配置文件是在任何情况下都被使用的。在 <code>nginx.conf</code> 中，包含若干配置项。每个配置项由配置指令和指令参数  2  个部分构成。指令参数也就是配置指令对应的配置值。</p>
<h3 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2. 作用域"></a>2. 作用域</h3><h4 id="1-main"><a href="#1-main" class="headerlink" title="1. main"></a>1. main</h4><p>   Nginx 在运行时与具体业务功能无关的一些参数，比如工作进程数，运行的身份等。存在于 main 上下文中的配置指令包括 <code>user worker_processes error_log events http mail</code></p>
<h4 id="2-http"><a href="#2-http" class="headerlink" title="2. http"></a>2. http</h4><p>   提供 http 服务相关的一些配置参数。存在于 http 上下文中的指令包括<code>server</code></p>
<h4 id="3-server"><a href="#3-server" class="headerlink" title="3. server"></a>3. server</h4><p>   http 服务上支持若干虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务的代理时，也可以建立若干 server，每个 server 通过监听的地址来区分。存在于 server 上下文中的配置指令包括<code>listen server_name access_log location protocol proxy smtp_auth xclient</code></p>
<h4 id="4-location"><a href="#4-location" class="headerlink" title="4. location"></a>4. location</h4><p>   http 服务中，某些特定的 URL 对应的一系列配置项。存在于 location 上下文中的指令包括｀index　root｀</p>
<h4 id="5-mail"><a href="#5-mail" class="headerlink" title="5. mail"></a>5. mail</h4><p>   实现 email 相关的 SMTP/IMAP/POP3 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。存在于 mail 上下文中的指令包括<code>server auth_http imap_capabilities</code></p>
<h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log logs/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 8192;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll</span><br><span class="line">    worker_connections 4096;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;    </span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    access_log /var/log/nginx/access.log;</span><br><span class="line">    error_log /var/log/nginx/error.log;</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_disable "msie6";</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br><span class="line">mail &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen     localhost:110;</span><br><span class="line">        protocol   pop3;</span><br><span class="line">        proxy      on;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen     localhost:143;</span><br><span class="line">        protocol   imap;</span><br><span class="line">        proxy      on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-配置文件说明"><a href="#3-配置文件说明" class="headerlink" title="3. 配置文件说明"></a>3. 配置文件说明</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#####Nginx配置文件nginx.conf中文详解#####</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">定义Nginx运行的用户和用户组</span></span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">nginx进程数，建议设置为等于CPU总核心数。</span></span><br><span class="line">worker_processes 8;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span></span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进程pid文件</span></span><br><span class="line">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定进程可以打开的最大描述符：数目</span></span><br><span class="line"><span class="meta">#</span><span class="bash">工作模式与连接数上限</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（<span class="built_in">ulimit</span> -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与<span class="built_in">ulimit</span> -n 的值保持一致。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span></span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class="line">    #是Linux2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，若跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    #补充说明：</span><br><span class="line">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="line">    #A）标准事件模型</span><br><span class="line">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">    #B）高效事件模型</span><br><span class="line">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line">    worker_connections 65535;</span><br><span class="line"></span><br><span class="line">    #keepalive超时时间。</span><br><span class="line">    keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="line">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="line">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="line">    #4096</span><br><span class="line">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line">    open_file_cache max=65535 inactive=60s;</span><br><span class="line"></span><br><span class="line">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class="line">    open_file_cache_valid 80s;</span><br><span class="line"></span><br><span class="line">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    </span><br><span class="line">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">设定http服务器，利用它的反向代理功能提供负载均衡支持</span></span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    include mime.types;</span><br><span class="line"></span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #默认编码</span><br><span class="line">    #charset utf-8;</span><br><span class="line"></span><br><span class="line">    #服务器名字的hash表大小</span><br><span class="line">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line"></span><br><span class="line">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line"></span><br><span class="line">    #设定通过nginx上传文件的大小</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">     </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒</span><br><span class="line">    keepalive_timeout 120;</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;    #压缩等级</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream jh.w3cschool.cn &#123;</span><br><span class="line">     </span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 192.168.80.121:80 weight=3;</span><br><span class="line">        server 192.168.80.122:80 weight=2;</span><br><span class="line">        server 192.168.80.123:80 weight=3;</span><br><span class="line"></span><br><span class="line">        #nginx的upstream目前支持4种方式的分配</span><br><span class="line">        #1、轮询（默认）</span><br><span class="line">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">        #2、weight</span><br><span class="line">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    server 192.168.0.14 weight=10;</span><br><span class="line">        #    server 192.168.0.15 weight=10;</span><br><span class="line">        #&#125;</span><br><span class="line">        #2、ip_hash</span><br><span class="line">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 192.168.0.14:88;</span><br><span class="line">        #    server 192.168.0.15:80;</span><br><span class="line">        #&#125;</span><br><span class="line">        #3、fair（第三方）</span><br><span class="line">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server server1;</span><br><span class="line">        #    server server2;</span><br><span class="line">        #    fair;</span><br><span class="line">        #&#125;</span><br><span class="line">        #4、url_hash（第三方）</span><br><span class="line">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server squid1:3128;</span><br><span class="line">        #    server squid2:3128;</span><br><span class="line">        #    hash $request_uri;</span><br><span class="line">        #    hash_method crc32;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        #tips:</span><br><span class="line">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 127.0.0.1:9090 down;</span><br><span class="line">        #    server 127.0.0.1:8080 weight=2;</span><br><span class="line">        #    server 127.0.0.1:6060;</span><br><span class="line">        #    server 127.0.0.1:7070 backup;</span><br><span class="line">        #&#125;</span><br><span class="line">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class="line"></span><br><span class="line">        #每个设备的状态设置为:</span><br><span class="line">        #1.down表示单前的server暂时不参与负载</span><br><span class="line">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="line">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        #域名可以有多个，用空格隔开</span><br><span class="line">        server_name www.w3cschool.cn w3cschool.cn;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /data/www/w3cschool;</span><br><span class="line"></span><br><span class="line">        #对******进行负载均衡</span><br><span class="line">        location ~ .*.(php|php5)?$</span><br><span class="line">        &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #图片缓存时间设置</span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 10d;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #日志格式设定</span><br><span class="line">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">        #$remote_user：用来记录客户端用户名称；</span><br><span class="line">        #$time_local： 用来记录访问时间与时区；</span><br><span class="line">        #$request： 用来记录请求的url与http协议；</span><br><span class="line">        #$status： 用来记录请求状态；成功是200，</span><br><span class="line">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class="line">        log_format access '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">        '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">        '"$http_user_agent" $http_x_forwarded_for';</span><br><span class="line">         </span><br><span class="line">        #定义本虚拟主机的访问日志</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.404.log  log404;</span><br><span class="line">         </span><br><span class="line">        #对 "/" 启用反向代理</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:88;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">             </span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">             </span><br><span class="line">            #以下是一些反向代理的配置，可选。</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">            #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="line">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class="line">            proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">            #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">            proxy_send_timeout 90;</span><br><span class="line"></span><br><span class="line">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line">            proxy_read_timeout 90;</span><br><span class="line"></span><br><span class="line">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class="line">            proxy_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">            proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">            proxy_temp_file_write_size 64k;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic "NginxStatus";</span><br><span class="line">            auth_basic_user_file confpasswd;</span><br><span class="line">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #本地动静分离反向代理配置</span><br><span class="line">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 15d; </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#####Nginx配置文件nginx.conf中文详解#####</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/18/hello-world/</url>
    <content><![CDATA[<p>此心安处是吾乡</p>]]></content>
      <categories>
        <category>Hello World</category>
      </categories>
  </entry>
</search>
